%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 6 0 R /F5 10 0 R /F6 11 0 R 
  /F7 12 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Times-Roman /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 15 0 R /XYZ 57.02362 652.3236 0 ] /Rect [ 205.4336 612.0236 299.9136 624.0236 ] /Subtype /Link /Type /Annot
>>
endobj
6 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 18 0 R /XYZ 57.02362 482.0236 0 ] /Rect [ 505.0336 498.0236 538.2294 510.0236 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 18 0 R /XYZ 57.02362 482.0236 0 ] /Rect [ 57.02362 486.0236 123.1836 498.0236 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 57.02362 353.0236 0 ] /Rect [ 317.1236 468.0236 362.1436 480.0236 ] /Subtype /Link /Type /Annot
>>
endobj
10 0 obj
<<
/BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
11 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
12 0 obj
<<
/BaseFont /Courier-Oblique /Encoding /WinAnsiEncoding /Name /F7 /Subtype /Type1 /Type /Font
>>
endobj
13 0 obj
<<
/Annots [ 5 0 R 7 0 R 8 0 R 9 0 R ] /Contents 43 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
14 0 obj
<<
/Contents 44 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
15 0 obj
<<
/Contents 45 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
16 0 obj
<<
/Contents 46 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
17 0 obj
<<
/Contents 47 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
18 0 obj
<<
/Contents 48 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
19 0 obj
<<
/Contents 49 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
20 0 obj
<<
/Contents 50 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
21 0 obj
<<
/Contents 51 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 42 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
22 0 obj
<<
/Outlines 24 0 R /PageLabels 52 0 R /PageMode /UseNone /Pages 42 0 R /Type /Catalog
>>
endobj
23 0 obj
<<
/Author () /CreationDate (D:20231202145148+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20231202145148+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
24 0 obj
<<
/Count 21 /First 25 0 R /Last 38 0 R /Type /Outlines
>>
endobj
25 0 obj
<<
/Count 8 /Dest [ 13 0 R /XYZ 57.02362 765.0236 0 ] /First 26 0 R /Last 33 0 R /Next 34 0 R /Parent 24 0 R 
  /Title (Assignment 4: Key-value store)
>>
endobj
26 0 obj
<<
/Dest [ 13 0 R /XYZ 57.02362 600.0236 0 ] /Next 27 0 R /Parent 25 0 R /Title (High-level overview)
>>
endobj
27 0 obj
<<
/Count 2 /Dest [ 13 0 R /XYZ 57.02362 456.0236 0 ] /First 28 0 R /Last 29 0 R /Next 30 0 R /Parent 25 0 R 
  /Prev 26 0 R /Title (Getting started)
>>
endobj
28 0 obj
<<
/Dest [ 13 0 R /XYZ 57.02362 372.0236 0 ] /Next 29 0 R /Parent 27 0 R /Title (Hashtable)
>>
endobj
29 0 obj
<<
/Dest [ 14 0 R /XYZ 57.02362 257.8236 0 ] /Parent 27 0 R /Prev 28 0 R /Title (Next steps)
>>
endobj
30 0 obj
<<
/Count 2 /Dest [ 15 0 R /XYZ 57.02362 679.8236 0 ] /First 31 0 R /Last 32 0 R /Next 33 0 R /Parent 25 0 R 
  /Prev 27 0 R /Title (Protocol specification)
>>
endobj
31 0 obj
<<
/Dest [ 15 0 R /XYZ 57.02362 649.8236 0 ] /Next 32 0 R /Parent 30 0 R /Title (Requests)
>>
endobj
32 0 obj
<<
/Dest [ 16 0 R /XYZ 57.02362 514.6236 0 ] /Parent 30 0 R /Prev 31 0 R /Title (Responses)
>>
endobj
33 0 obj
<<
/Dest [ 16 0 R /XYZ 57.02362 266.4236 0 ] /Parent 25 0 R /Prev 30 0 R /Title (Framework)
>>
endobj
34 0 obj
<<
/Dest [ 17 0 R /XYZ 57.02362 269.8236 0 ] /Next 35 0 R /Parent 24 0 R /Prev 25 0 R /Title (Server design)
>>
endobj
35 0 obj
<<
/Dest [ 18 0 R /XYZ 57.02362 507.0236 0 ] /Next 36 0 R /Parent 24 0 R /Prev 34 0 R /Title (Testing and debugging)
>>
endobj
36 0 obj
<<
/Dest [ 19 0 R /XYZ 57.02362 587.8236 0 ] /Next 37 0 R /Parent 24 0 R /Prev 35 0 R /Title (The assignment and grading)
>>
endobj
37 0 obj
<<
/Dest [ 20 0 R /XYZ 57.02362 717.0236 0 ] /Next 38 0 R /Parent 24 0 R /Prev 36 0 R /Title (Run with Docker)
>>
endobj
38 0 obj
<<
/Count 3 /Dest [ 20 0 R /XYZ 57.02362 606.0236 0 ] /First 39 0 R /Last 41 0 R /Parent 24 0 R /Prev 37 0 R 
  /Title (Pthreads)
>>
endobj
39 0 obj
<<
/Dest [ 20 0 R /XYZ 57.02362 357.8236 0 ] /Next 40 0 R /Parent 38 0 R /Title (Mutual exclusion)
>>
endobj
40 0 obj
<<
/Dest [ 20 0 R /XYZ 57.02362 201.8236 0 ] /Next 41 0 R /Parent 38 0 R /Prev 39 0 R /Title (Synchronization)
>>
endobj
41 0 obj
<<
/Dest [ 20 0 R /XYZ 57.02362 141.8236 0 ] /Parent 38 0 R /Prev 40 0 R /Title (Conditional variables)
>>
endobj
42 0 obj
<<
/Count 9 /Kids [ 13 0 R 14 0 R 15 0 R 16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R ] /Type /Pages
>>
endobj
43 0 obj
<<
/Length 12712
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Assignment 4: Key-value store) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 678.0236 cm
q
BT 1 0 0 1 0 50 Tm -0.11411 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this assignment you will implement your own ) Tj /F3 10 Tf (remote in-memory key-value store) Tj /F1 10 Tf (. It must support multiple) Tj T* 0 Tw 2.098453 Tw (concurrent clients accessing and modifyng the data store. Similar key-value stores, such as Redis and) Tj T* 0 Tw .064272 Tw (Memcached, are very popular and often used for caching. During this assignment you will learn about writing) Tj T* 0 Tw .445522 Tw (a server application, using multiple threads to support parallel clients, and how to protect data structures for) Tj T* 0 Tw (concurrent accesses.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 612.0236 cm
q
BT 1 0 0 1 0 50 Tm .28886 Tw 12 TL /F1 10 Tf 0 0 0 rg (A key-value store allows users to store and retrieve data from a server over the network. The data \(value\) is) Tj T* 0 Tw .51755 Tw (addressed by a string \(the key\). Conceptually they are very simple, and only have 3 operations: SET, GET,) Tj T* 0 Tw 1.870522 Tw (and DEL. A SET inserts or modifies data into the store, whereas GET retrieves previously stored data.) Tj T* 0 Tw 1.106772 Tw (Finally, DEL simply removes a stored entry. For a detailed description of these commands, and the exact) Tj T* 0 Tw (protocol that is used, see section ) Tj 0 .4 .6 rg (Protocol specification) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 582.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (High-level overview) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 528.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .335464 Tw (A client application interacts with the key-value store via a TCP server. The client and the server establish a) Tj T* 0 Tw 1.069897 Tw (connection using sockets and they exchange messages. The client sends a message to the server via its) Tj T* 0 Tw -0.032083 Tw (socket in order to modify an item from the store. The server parses the message, handle it, and replies with a) Tj T* 0 Tw (message containing a status code. For example, the client's requet may succeeed or fail.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 486.0236 cm
q
BT 1 0 0 1 0 26 Tm 2.531772 Tw 12 TL /F1 10 Tf 0 0 0 rg (Besides the ) Tj /F4 10 Tf (check.py) Tj /F1 10 Tf ( script you are already familiar with, in this assingment we also provide a client) Tj T* 0 Tw .022545 Tw /F4 10 Tf (test_client.py) Tj /F1 10 Tf ( that you can use to interact with the server by sending request one at a time. In section ) Tj 0 .4 .6 rg (Testing) Tj T* 0 Tw (and debugging) Tj 0 0 0 rg ( we describe how to use this script.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 468.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The server stores items in a data structure as described in ) Tj 0 .4 .6 rg (Hashtable) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 438.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Getting started) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 384.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.105522 Tw 12 TL /F1 10 Tf 0 0 0 rg (You should add your code to ) Tj /F4 10 Tf (kvstore.c) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (kvstore.h) Tj /F1 10 Tf (, already included in the framework. This file already) Tj T* 0 Tw 1.366373 Tw (contains some boilerplate code to get you started. In particular, it already sets up the server socket, and) Tj T* 0 Tw 1.829104 Tw (contains some \(single-threaded\) code to accept connections and requests. You should not modify other) Tj T* 0 Tw (existing files. The key-value store must be implemented by means of a hashable.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 357.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Hashtable) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 315.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.629314 Tw 12 TL /F1 10 Tf 0 0 0 rg (Due to some differences in terminology, we here summarize what a hashtable is. A hashtable is a data) Tj T* 0 Tw .241019 Tw (structure with a fixed amount of entries called ) Tj /F4 10 Tf (buckets) Tj /F1 10 Tf (. An ) Tj /F4 10 Tf (hash) Tj /F1 10 Tf ( function is applied to the key-value pair key.) Tj T* 0 Tw (Each bucket contains entries with the same hash.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 297.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The hashtable struct is already defined in ) Tj /F4 10 Tf (hash.h) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 121.8975 cm
q
q
.987743 0 0 .987743 0 0 cm
q
1 0 0 1 6.6 6.681901 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 168 re B*
Q
q
.960784 .960784 .862745 rg
n 0 144 42 12 re f*
.960784 .960784 .862745 rg
n 42 144 6 12 re f*
.960784 .960784 .862745 rg
n 48 144 36 12 re f*
.960784 .960784 .862745 rg
n 84 144 6 12 re f*
.960784 .960784 .862745 rg
n 90 144 66 12 re f*
.960784 .960784 .862745 rg
n 156 144 6 12 re f*
.960784 .960784 .862745 rg
n 162 144 6 12 re f*
.960784 .960784 .862745 rg
n 168 144 0 12 re f*
.960784 .960784 .862745 rg
n 0 132 24 12 re f*
.960784 .960784 .862745 rg
n 24 132 36 12 re f*
.960784 .960784 .862745 rg
n 60 132 6 12 re f*
.960784 .960784 .862745 rg
n 66 132 66 12 re f*
.960784 .960784 .862745 rg
n 132 132 6 12 re f*
.960784 .960784 .862745 rg
n 138 132 6 12 re f*
.960784 .960784 .862745 rg
n 144 132 24 12 re f*
.960784 .960784 .862745 rg
n 168 132 6 12 re f*
.960784 .960784 .862745 rg
n 174 132 6 12 re f*
.960784 .960784 .862745 rg
n 180 132 6 12 re f*
.960784 .960784 .862745 rg
n 186 132 24 12 re f*
.960784 .960784 .862745 rg
n 210 132 6 12 re f*
.960784 .960784 .862745 rg
n 216 132 24 12 re f*
.960784 .960784 .862745 rg
n 240 132 234 12 re f*
.960784 .960784 .862745 rg
n 0 120 24 12 re f*
.960784 .960784 .862745 rg
n 24 120 24 12 re f*
.960784 .960784 .862745 rg
n 48 120 6 12 re f*
.960784 .960784 .862745 rg
n 54 120 6 12 re f*
.960784 .960784 .862745 rg
n 60 120 18 12 re f*
.960784 .960784 .862745 rg
n 78 120 6 12 re f*
.960784 .960784 .862745 rg
n 84 120 108 12 re f*
.960784 .960784 .862745 rg
n 192 120 78 12 re f*
.960784 .960784 .862745 rg
n 0 108 24 12 re f*
.960784 .960784 .862745 rg
n 24 108 24 12 re f*
.960784 .960784 .862745 rg
n 48 108 6 12 re f*
.960784 .960784 .862745 rg
n 54 108 6 12 re f*
.960784 .960784 .862745 rg
n 60 108 30 12 re f*
.960784 .960784 .862745 rg
n 90 108 6 12 re f*
.960784 .960784 .862745 rg
n 96 108 96 12 re f*
.960784 .960784 .862745 rg
n 192 108 90 12 re f*
.960784 .960784 .862745 rg
n 0 96 24 12 re f*
.960784 .960784 .862745 rg
n 24 96 36 12 re f*
.960784 .960784 .862745 rg
n 60 96 6 12 re f*
.960784 .960784 .862745 rg
n 66 96 60 12 re f*
.960784 .960784 .862745 rg
n 126 96 6 12 re f*
.960784 .960784 .862745 rg
n 132 96 60 12 re f*
.960784 .960784 .862745 rg
n 192 96 132 12 re f*
.960784 .960784 .862745 rg
n 0 84 24 12 re f*
.960784 .960784 .862745 rg
n 24 84 36 12 re f*
.960784 .960784 .862745 rg
n 60 84 6 12 re f*
.960784 .960784 .862745 rg
n 66 84 54 12 re f*
.960784 .960784 .862745 rg
n 120 84 6 12 re f*
.960784 .960784 .862745 rg
n 126 84 6 12 re f*
.960784 .960784 .862745 rg
n 132 84 24 12 re f*
.960784 .960784 .862745 rg
n 156 84 6 12 re f*
.960784 .960784 .862745 rg
n 162 84 0 12 re f*
.960784 .960784 .862745 rg
n 0 72 6 12 re f*
.960784 .960784 .862745 rg
n 6 72 6 12 re f*
.960784 .960784 .862745 rg
n 12 72 66 12 re f*
.960784 .960784 .862745 rg
n 78 72 6 12 re f*
.960784 .960784 .862745 rg
n 84 72 0 12 re f*
.960784 .960784 .862745 rg
n 0 60 0 12 re f*
.960784 .960784 .862745 rg
n 0 48 42 12 re f*
.960784 .960784 .862745 rg
n 42 48 6 12 re f*
.960784 .960784 .862745 rg
n 48 48 36 12 re f*
.960784 .960784 .862745 rg
n 84 48 6 12 re f*
.960784 .960784 .862745 rg
n 90 48 6 12 re f*
.960784 .960784 .862745 rg
n 96 48 0 12 re f*
.960784 .960784 .862745 rg
n 0 36 24 12 re f*
.960784 .960784 .862745 rg
n 24 36 48 12 re f*
.960784 .960784 .862745 rg
n 72 36 6 12 re f*
.960784 .960784 .862745 rg
n 78 36 18 12 re f*
.960784 .960784 .862745 rg
n 96 36 6 12 re f*
.960784 .960784 .862745 rg
n 102 36 48 12 re f*
.960784 .960784 .862745 rg
n 150 36 6 12 re f*
.960784 .960784 .862745 rg
n 156 36 6 12 re f*
.960784 .960784 .862745 rg
n 162 36 120 12 re f*
.960784 .960784 .862745 rg
n 0 24 24 12 re f*
.960784 .960784 .862745 rg
n 24 24 66 12 re f*
.960784 .960784 .862745 rg
n 90 24 6 12 re f*
.960784 .960784 .862745 rg
n 96 24 12 12 re f*
.960784 .960784 .862745 rg
n 108 24 30 12 re f*
.960784 .960784 .862745 rg
n 138 24 6 12 re f*
.960784 .960784 .862745 rg
n 144 24 18 12 re f*
.960784 .960784 .862745 rg
n 162 24 60 12 re f*
.960784 .960784 .862745 rg
n 0 12 24 12 re f*
.960784 .960784 .862745 rg
n 24 12 36 12 re f*
.960784 .960784 .862745 rg
n 60 12 6 12 re f*
.960784 .960784 .862745 rg
n 66 12 42 12 re f*
.960784 .960784 .862745 rg
n 108 12 6 12 re f*
.960784 .960784 .862745 rg
n 114 12 6 12 re f*
.960784 .960784 .862745 rg
n 120 12 24 12 re f*
.960784 .960784 .862745 rg
n 144 12 6 12 re f*
.960784 .960784 .862745 rg
n 150 12 0 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
.960784 .960784 .862745 rg
n 6 0 6 12 re f*
.960784 .960784 .862745 rg
n 12 0 66 12 re f*
.960784 .960784 .862745 rg
n 78 0 6 12 re f*
.960784 .960784 .862745 rg
n 84 0 0 12 re f*
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf .666667 .133333 1 rg (typedef) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf 0 0 1 rg (hash_item_t) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg ({) Tj .733333 .733333 .733333 rg  T* (    ) Tj /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf 0 0 1 rg (hash_item_t) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (next) Tj (,) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (prev) Tj (;) Tj .733333 .733333 .733333 rg (    ) Tj /F7 10 Tf 0 .533333 0 rg (// Next and previous item in the bucket) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj 0 .733333 0 rg (char) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (key) Tj (;) Tj .733333 .733333 .733333 rg (                  ) Tj /F7 10 Tf 0 .533333 0 rg (// Item's key) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj 0 .733333 0 rg (char) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (value) Tj (;) Tj .733333 .733333 .733333 rg (                ) Tj /F7 10 Tf 0 .533333 0 rg (// Item's value) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj 0 .733333 0 rg (size_t) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (value_size) Tj (;) Tj .733333 .733333 .733333 rg (          ) Tj /F7 10 Tf 0 .533333 0 rg (// Item's value length) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf 0 0 1 rg (user_item) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (user) Tj (;) Tj .733333 .733333 .733333 rg  T* 0 0 0 rg (}) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (hash_item_t) Tj (;) Tj .733333 .733333 .733333 rg  T*  T* /F5 10 Tf .666667 .133333 1 rg (typedef) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg ({) Tj .733333 .733333 .733333 rg  T* (    ) Tj 0 .733333 0 rg (unsigned) Tj .733333 .733333 .733333 rg ( ) Tj 0 .733333 0 rg (int) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (capacity) Tj (;) Tj .733333 .733333 .733333 rg ( ) Tj /F7 10 Tf 0 .533333 0 rg (// Number of buckets) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj 0 0 0 rg (hash_item_t) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (**) Tj 0 0 0 rg (items) Tj (;) Tj .733333 .733333 .733333 rg (   ) Tj /F7 10 Tf 0 .533333 0 rg (// Buckets) Tj T* /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf 0 0 1 rg (user_ht) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (user) Tj (;) Tj .733333 .733333 .733333 rg  T* 0 0 0 rg (}) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (hashtable_t) Tj (;) Tj .733333 .733333 .733333 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 101.8975 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (hashtable_t) Tj /F1 10 Tf ( is your hashtable structure.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 71.89752 cm
q
BT 1 0 0 1 0 14 Tm -0.099404 Tw 12 TL /F6 10 Tf 0 0 0 rg (capacity) Tj /F1 10 Tf ( specifies how many buckets the hashtable contains. ) Tj /F3 10 Tf (The hashtable must be initialized with 256) Tj T* 0 Tw (buckets) Tj /F1 10 Tf ( \(i.e., ) Tj /F4 10 Tf (capacity) Tj /F1 10 Tf ( must be 256\).) Tj T* ET
Q
Q
 
endstream
endobj
44 0 obj
<<
/Length 6918
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 729.0236 cm
q
BT 1 0 0 1 0 26 Tm .811575 Tw 12 TL /F6 10 Tf 0 0 0 rg (items) Tj /F1 10 Tf ( is a dynamic list of pointers. These pointers point to elements of type ) Tj /F6 10 Tf (hash_item_t) Tj /F1 10 Tf (. At index ) Tj /F6 10 Tf (i) Tj /F1 10 Tf ( of) Tj T* 0 Tw .96631 Tw /F6 10 Tf (items) Tj /F1 10 Tf ( \() Tj /F6 10 Tf (items[i]) Tj /F1 10 Tf (\) you store the ) Tj /F6 10 Tf (ith) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (bucket) Tj /F1 10 Tf (. The bucket contains several ) Tj /F6 10 Tf (hash_item_t) Tj /F1 10 Tf ( elements, as a) Tj T* 0 Tw (double linked list \(see ) Tj /F6 10 Tf (next) Tj /F1 10 Tf ( and ) Tj /F6 10 Tf (prev) Tj /F1 10 Tf ( field\).) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 675.0236 cm
q
.960784 .960784 .862745 rg
n 0 24 54 12 re f*
.960784 .960784 .862745 rg
n 54 24 6.240522 12 re f*
.960784 .960784 .862745 rg
n 60.24052 24 6 12 re f*
.960784 .960784 .862745 rg
n 66.24052 24 6.240522 12 re f*
.960784 .960784 .862745 rg
n 72.48104 24 48 12 re f*
BT 1 0 0 1 0 38 Tm 2.285522 Tw 12 TL /F1 10 Tf 0 0 0 rg (The the diagram below depict the hashtable structure. To determine the bucket of a specific key, use) Tj T* 0 Tw .240522 Tw /F6 10 Tf (hash\(key\)) Tj ( ) Tj (%) Tj ( ) Tj (capacity) Tj /F1 10 Tf ( \(where the ) Tj /F4 10 Tf (hash) Tj /F1 10 Tf ( function is provided in ) Tj /F4 10 Tf (hash.c) Tj /F1 10 Tf (\). New items should be inserted at) Tj T* 0 Tw .112018 Tw (the ) Tj /F3 10 Tf (head) Tj /F1 10 Tf ( of the list. Each item contains a null-terminated ) Tj /F4 10 Tf (key) Tj /F1 10 Tf (. The key has a ) Tj /F4 10 Tf (value) Tj /F1 10 Tf ( string of ) Tj /F4 10 Tf (value_size) Tj /F1 10 Tf ( chars) Tj T* 0 Tw (associated with it.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 633.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .776962 Tw (Your first task it to initialize an empty hashtable. Once you have a functional hashtable, you should extend) Tj T* 0 Tw .546027 Tw (these structures to include any additional data required for locking/synchronization code. Indeed, during the) Tj T* 0 Tw (assignment you need to ensure the hashtable can be accessed and modified in a concurrent manner.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 603.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.78131 Tw 12 TL /F1 10 Tf 0 0 0 rg (Both ) Tj /F6 10 Tf (hashable_t) Tj /F1 10 Tf ( and ) Tj /F6 10 Tf (hash_item_t) Tj /F1 10 Tf ( contains an ) Tj /F3 10 Tf (user) Tj /F1 10 Tf ( field. Both are defined in ) Tj /F4 10 Tf (kvstore.h) Tj /F1 10 Tf ( but their) Tj T* 0 Tw (implementation is empty. ) Tj /F4 10 Tf (You can add other fields to the data structure!) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 561.0236 cm
q
BT 1 0 0 1 0 26 Tm .694556 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F6 10 Tf (user) Tj /F1 10 Tf ( field inside ) Tj /F6 10 Tf (hash_item_t) Tj /F1 10 Tf ( can be used to access user defined variables per item \() Tj /F6 10 Tf (user_item) Tj /F1 10 Tf (\).) Tj T* 0 Tw .092256 Tw (The user field inside ) Tj /F6 10 Tf (hashable_t) Tj /F1 10 Tf ( can be used to access user defined variables inside the hashtable of type) Tj T* 0 Tw /F6 10 Tf (struct) Tj ( ) Tj (user_ht) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 543.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (You can add fields into ) Tj /F6 10 Tf (user_item) Tj /F1 10 Tf ( and ) Tj /F6 10 Tf (user_ht) Tj /F1 10 Tf ( to keep your locks, mutex, synchronization variables etc.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 269.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 264 re B*
Q
q
BT 1 0 0 1 0 242 Tm 12 TL /F6 10 Tf 0 0 0 rg (              hashtable_t               hash_item_t               hash_item_t) Tj T* (              items                   key   ...                 key   ...) Tj T* (              +-----+                +-----+-----+  --next--) Tj (>) Tj (  +-----+-----+) Tj T* (hash\(caw\) --) Tj (>) Tj ( |  0  | --items[0]--) Tj (>) Tj (  | bsf | ... |             | caw | ... |) Tj T* (              +-----+                +-----+-----+  ) Tj (<) Tj (--prev--  +-----+-----+) Tj T* (              |  1  |) Tj T* (              +-----+) Tj T* (              |  2  |) Tj T* (              +-----+       +-----+-----+) Tj T* (hash\(waf\) --) Tj (>) Tj ( |  3  |  --) Tj (>) Tj (  | waf | ... |) Tj T* (              +-----+       +-----+-----+) Tj T* (              |  4  |) Tj T* (              +-----+       +-----+-----+  --) Tj (>) Tj (  +-----+-----+  --) Tj (>) Tj  T* (hash\(hoi\) --) Tj (>) Tj ( |  5  |  --) Tj (>) Tj (  | hoi | ... |       | sal | ... |       ...) Tj T* (              +-----+       +-----+-----+  ) Tj (<) Tj (--  +-----+-----+  ) Tj (<) Tj (--) Tj T* (              |  6  |) Tj T* (              +-----+) Tj T* (              |  .  |) Tj T* (              |  .  |) Tj T* (              |  .  |) Tj T* (              |     |) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 242.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Next steps) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 188.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.034272 Tw (You should then implement a \(single-threaded\) version of the SET request. You have to use the provided) Tj T* 0 Tw -0.079444 Tw (data structures, as the framework uses these internally to check your results. Once your single-threaded SET) Tj T* 0 Tw 3.13131 Tw (works, you can also implement single-threadedversions of GET and DEL, or move on to implement) Tj T* 0 Tw (concurrency.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 158.8236 cm
q
.960784 .960784 .862745 rg
n 0 0 84 12 re f*
BT 1 0 0 1 0 14 Tm 4.610642 Tw 12 TL /F1 10 Tf 0 0 0 rg (To implement concurrency, first start by creating separate threads for each connection. Use the) Tj T* 0 Tw /F6 10 Tf (pthread_create) Tj /F1 10 Tf ( function to create threads.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 104.8236 cm
q
.960784 .960784 .862745 rg
n 296.0361 24 78 12 re f*
BT 1 0 0 1 0 38 Tm .335257 Tw 12 TL /F1 10 Tf 0 0 0 rg (After your server supports multiple concurrent connections, you should modify your hashtable data structure) Tj T* 0 Tw -0.019444 Tw (to be thread-safe. In particular, you should any required locks \(see ) Tj /F6 10 Tf (pthread_mutex) Tj /F1 10 Tf (\) to the provided structs.) Tj T* 0 Tw .744609 Tw (Ensure that concurrent operations are allowed on different items \(even in the same bucket\), but not on the) Tj T* 0 Tw (same item. Make sure to also protect modifications of the hashtable and bucket linked-list.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 62.82362 cm
q
BT 1 0 0 1 0 26 Tm .489908 Tw 12 TL /F3 10 Tf 0 0 0 rg (NOTE) Tj /F1 10 Tf ( For this assignment you only can add all your code to kvstore.c and kvstore.h. ) Tj /F3 10 Tf (You are not allowed) Tj T* 0 Tw 1.168797 Tw (to modify any of the other framework files.) Tj /F1 10 Tf ( You can add your additional sources. Do not forget to add) Tj T* 0 Tw (them in the Makefile under:) Tj T* ET
Q
Q
 
endstream
endobj
45 0 obj
<<
/Length 6670
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 72 re B*
Q
q
.960784 .960784 .862745 rg
n 0 48 342 12 re f*
.960784 .960784 .862745 rg
n 0 36 108 12 re f*
.960784 .960784 .862745 rg
n 108 36 6 12 re f*
.960784 .960784 .862745 rg
n 114 36 6 12 re f*
.960784 .960784 .862745 rg
n 120 36 0 12 re f*
.960784 .960784 .862745 rg
n 0 24 0 12 re f*
.960784 .960784 .862745 rg
n 0 12 342 12 re f*
.960784 .960784 .862745 rg
n 0 0 108 12 re f*
.960784 .960784 .862745 rg
n 108 0 6 12 re f*
.960784 .960784 .862745 rg
n 114 0 6 12 re f*
.960784 .960784 .862745 rg
n 120 0 0 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F6 10 Tf 0 .533333 0 rg (# Add additional .c files here if you added any yourself.) Tj T* 0 0 0 rg (ADDITIONAL_SOURCES) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (=) Tj .733333 .733333 .733333 rg  T*  T* 0 .533333 0 rg (# Add additional .h files here if you added any yourself.) Tj T* 0 0 0 rg (ADDITIONAL_HEADERS) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (=) Tj .733333 .733333 .733333 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 661.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Protocol specification) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 634.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Requests) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 592.8236 cm
q
BT 1 0 0 1 0 26 Tm .549314 Tw 12 TL /F1 10 Tf 0 0 0 rg (Our key-value store uses a simple text-based protocol. After opening a connection, a user can issue any of) Tj T* 0 Tw .920556 Tw (the following commands. Once a command is completed, another command can be issued over the same) Tj T* 0 Tw (connection. All commands and responses are terminated by a newline \() Tj /F6 10 Tf (\\n) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 562.8236 cm
q
BT 1 0 0 1 0 14 Tm .512556 Tw 12 TL /F1 10 Tf 0 0 0 rg (Keys can only consist of printable ascii characters except for whitespace. Values can contain any character) Tj T* 0 Tw (\(including ) Tj /F6 10 Tf (\\n) Tj /F1 10 Tf ( and ) Tj /F6 10 Tf (\\0) Tj /F1 10 Tf (\), and must therefore always be accompanied by a size field.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 544.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The general format of every command is as follows:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 499.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 0 0 rg (<) Tj (command) Tj (>) Tj ( [) Tj (<) Tj (key) Tj (>) Tj (] [) Tj (<) Tj (payload_len) Tj (>) Tj (]\\n) Tj T* ([) Tj (<) Tj (payload) Tj (>) Tj (\\n]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 467.6236 cm
q
BT 1 0 0 1 0 14 Tm .681079 Tw 12 TL /F1 10 Tf 0 0 0 rg (Where <) Tj (command) Tj (> is one of SET, GET, DEL or RESET. Terms in brackets are optional depending on the) Tj T* 0 Tw (command. When <) Tj (payload_len) Tj (> is omitted or 0, <) Tj (payload) Tj (> ) Tj /F4 10 Tf (and) Tj /F1 10 Tf ( its accompanying ) Tj /F6 10 Tf (\\n) Tj /F1 10 Tf ( are not sent.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 449.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SET) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 404.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 0 0 rg (SET ) Tj (<) Tj (key) Tj (>) Tj ( ) Tj (<) Tj (payload_len) Tj (>) Tj (\\n) Tj T* (<) Tj (payload) Tj (>) Tj (\\n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 324.4236 cm
q
BT 1 0 0 1 0 62 Tm .780491 Tw 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf ( Inserts a new key with a provided value, or overwrites the value of an existing key-value pair.) Tj T* 0 Tw .433597 Tw (Until the server has received the full payload and written it as value, the value must remain locked, and any) Tj T* 0 Tw 1.825197 Tw (other operation on this key should return an error. ) Tj /F3 10 Tf (Return codes) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (OK) Tj /F1 10 Tf ( If the data was successfully and) Tj T* 0 Tw 2.251772 Tw (completely inserted. ) Tj /F4 10 Tf (KEY_ERROR) Tj /F1 10 Tf ( If the key could not be inserted because it is already locked by an) Tj T* 0 Tw 1.521147 Tw (operation of another user. ) Tj /F4 10 Tf (STORE_ERROR) Tj /F1 10 Tf ( If data could not be stored, e.g., when no memory could be) Tj T* 0 Tw (allocated for it.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 294.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.169903 Tw (Note: the server must consume the whole payload even if an error is detected, to prevent the connection) Tj T* 0 Tw (from desyncing.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 276.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (GET) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 243.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (GET ) Tj (<) Tj (key) Tj (>) Tj (\\n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 199.2236 cm
q
BT 1 0 0 1 0 26 Tm 3.43989 Tw 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf ( Retrieves the value of a previously inserted key. Until the entire value has been sent) Tj T* 0 Tw 2.071223 Tw (successfully, the key must be locked for write operations \(SET and DEL\). Concurrent reads \(GET\) are) Tj T* 0 Tw (allowed.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 169.2236 cm
q
BT 1 0 0 1 0 14 Tm .092256 Tw 12 TL /F3 10 Tf 0 0 0 rg (Return codes:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (OK) Tj /F1 10 Tf ( Followed by the value of <) Tj (payload_len) Tj (> bytes. ) Tj /F4 10 Tf (KEY_ERROR) Tj /F1 10 Tf ( If the key does not exist, or) Tj T* 0 Tw (if the key is locked by another operation.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 151.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DEL) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 118.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (DEL ) Tj (<) Tj (key) Tj (>) Tj (\\n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 98.02362 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf ( Removes a key-value pair from the store.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 68.02362 cm
q
BT 1 0 0 1 0 14 Tm -0.059583 Tw 12 TL /F3 10 Tf 0 0 0 rg (Return codes) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (OK) Tj /F1 10 Tf ( If the key was successfully deleted. ) Tj /F4 10 Tf (KEY_ERROR) Tj /F1 10 Tf ( If the key does not exist, or if the key is) Tj T* 0 Tw (locked by another operation.) Tj T* ET
Q
Q
 
endstream
endobj
46 0 obj
<<
/Length 9317
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (STAT) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 719.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (STAT ) Tj (<) Tj (stat) Tj (>) Tj (\\n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 699.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf ( Retrieve general statistics. Possible values of <) Tj (stat) Tj (> are:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 693.8236 cm
Q
q
1 0 0 1 57.02362 693.8236 cm
Q
q
1 0 0 1 57.02362 681.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (REQ: number of requests served at that time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 675.8236 cm
Q
q
1 0 0 1 57.02362 663.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (THG: server throughput \(i.e., number of requests server per seconds\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 663.8236 cm
Q
q
1 0 0 1 57.02362 645.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Return codes:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (OK) Tj /F1 10 Tf ( Followed by an integer representing the value of the <) Tj (stat) Tj (> statistic.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 627.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (RESET) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 594.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL (RESET\\n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 574.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf ( Reset the entire store, so that no key-value pairs remain.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 556.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Return codes:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (OK) Tj /F1 10 Tf ( On successful clearing of all items.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 526.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.382397 Tw (Note: supporting this command is optional, but may be required for using some of the debugging modes) Tj T* 0 Tw (mentioned later in this document.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 499.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Responses) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 481.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For every command the server will respond with a response in the following format:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 436.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 0 0 rg (<) Tj (status) Tj (>) Tj ( ) Tj (<) Tj (code) Tj (>) Tj ( ) Tj (<) Tj (payload_len) Tj (>) Tj (\\n) Tj T* ([) Tj (<) Tj (payload) Tj (>) Tj (\\n]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 416.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If <) Tj (payload_len) Tj (> is 0, payload \(and its accompanying ) Tj /F6 10 Tf (\\n) Tj /F1 10 Tf (\) is omitted. Possible responses are:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 410.4236 cm
Q
q
1 0 0 1 57.02362 320.4236 cm
q
1 1 1 rg
n 0 90 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 72 481.2283 -18 re f*
1 1 1 rg
n 0 54 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 36 481.2283 -18 re f*
1 1 1 rg
n 0 18 481.2283 -18 re f*
0 0 0 rg
BT /F3 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 66.77106 0 Td (status) Tj T* -66.77106 0 Td ET
Q
Q
q
1 0 0 1 180.9921 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 135.4481 0 Td (code) Tj T* -135.4481 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 180.9921 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OK) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 180.9921 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (KEY_ERROR) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 180.9921 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (PARSING_ERROR) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 180.9921 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (STORE_ERROR) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 481.2283 72 l S
n 0 54 m 481.2283 54 l S
n 0 36 m 481.2283 36 l S
n 0 18 m 481.2283 18 l S
n 174.9921 0 m 174.9921 90 l S
n 0 90 m 481.2283 90 l S
n 0 0 m 481.2283 0 l S
n 0 0 m 0 90 l S
n 481.2283 0 m 481.2283 90 l S
Q
Q
Q
q
1 0 0 1 57.02362 320.4236 cm
Q
q
1 0 0 1 57.02362 278.4236 cm
q
BT 1 0 0 1 0 26 Tm -0.095647 Tw 12 TL /F3 10 Tf 0 0 0 rg (Note on PARSING_ERROR:) Tj /F1 10 Tf ( Upon arrival of a SET request, you should read the data from the stream in any) Tj T* 0 Tw .45713 Tw (case \(i.e., even if the key is already locked by another thread\). Another request, which finds the stream into) Tj T* 0 Tw (an invalid state, cannot be parsed and PARSING_ERROR is returned.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 248.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Framework) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 218.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.036772 Tw (The provided framework aims to abstract away most code related to networking, such as sockets and the) Tj T* 0 Tw (protocol.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 164.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .811223 Tw (This section provides a more detailed description about our framework. Not everything here will be directly) Tj T* 0 Tw 1.417397 Tw (useful to you. However the following description aims to provide you with a deeper knowledge about the) Tj T* 0 Tw .829882 Tw (underlying framework workings. For your assignment you are asked to implement the server main function) Tj T* 0 Tw (and functions used to handle client requests.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 158.4236 cm
Q
q
1 0 0 1 57.02362 158.4236 cm
Q
q
1 0 0 1 57.02362 146.4236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (common.h) Tj /F1 10 Tf ( defines some basic data structures such as ) Tj /F4 10 Tf (request_t) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 146.4236 cm
Q
q
1 0 0 1 57.02362 65.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 72 re B*
Q
q
.960784 .960784 .862745 rg
n 0 48 36 12 re f*
.960784 .960784 .862745 rg
n 36 48 6 12 re f*
.960784 .960784 .862745 rg
n 42 48 42 12 re f*
.960784 .960784 .862745 rg
n 84 48 6 12 re f*
.960784 .960784 .862745 rg
n 90 48 6 12 re f*
.960784 .960784 .862745 rg
n 96 48 0 12 re f*
.960784 .960784 .862745 rg
n 0 36 24 12 re f*
.960784 .960784 .862745 rg
n 24 36 24 12 re f*
.960784 .960784 .862745 rg
n 48 36 6 12 re f*
.960784 .960784 .862745 rg
n 54 36 36 12 re f*
.960784 .960784 .862745 rg
n 90 36 6 12 re f*
.960784 .960784 .862745 rg
n 96 36 36 12 re f*
.960784 .960784 .862745 rg
n 132 36 6 12 re f*
.960784 .960784 .862745 rg
n 138 36 0 12 re f*
.960784 .960784 .862745 rg
n 0 24 24 12 re f*
.960784 .960784 .862745 rg
n 24 24 24 12 re f*
.960784 .960784 .862745 rg
n 48 24 6 12 re f*
.960784 .960784 .862745 rg
n 54 24 6 12 re f*
.960784 .960784 .862745 rg
n 60 24 18 12 re f*
.960784 .960784 .862745 rg
n 78 24 6 12 re f*
.960784 .960784 .862745 rg
n 84 24 0 12 re f*
.960784 .960784 .862745 rg
n 0 12 24 12 re f*
.960784 .960784 .862745 rg
n 24 12 36 12 re f*
.960784 .960784 .862745 rg
n 60 12 6 12 re f*
.960784 .960784 .862745 rg
n 66 12 42 12 re f*
.960784 .960784 .862745 rg
n 108 12 6 12 re f*
.960784 .960784 .862745 rg
n 114 12 0 12 re f*
.960784 .960784 .862745 rg
n 0 0 24 12 re f*
.960784 .960784 .862745 rg
n 24 0 36 12 re f*
.960784 .960784 .862745 rg
n 60 0 6 12 re f*
.960784 .960784 .862745 rg
n 66 0 42 12 re f*
.960784 .960784 .862745 rg
n 108 0 6 12 re f*
.960784 .960784 .862745 rg
n 114 0 0 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf .666667 .133333 1 rg (struct) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj /F5 10 Tf 0 0 1 rg (request) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg ({) Tj .733333 .733333 .733333 rg  T* (    ) Tj /F5 10 Tf .666667 .133333 1 rg (enum) Tj /F6 10 Tf .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (method) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (method) Tj (;) Tj .733333 .733333 .733333 rg  T* (    ) Tj 0 .733333 0 rg (char) Tj .733333 .733333 .733333 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (key) Tj (;) Tj .733333 .733333 .733333 rg  T* (    ) Tj 0 .733333 0 rg (size_t) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (key_len) Tj (;) Tj .733333 .733333 .733333 rg  T* (    ) Tj 0 .733333 0 rg (size_t) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (msg_len) Tj (;) Tj .733333 .733333 .733333 rg  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
47 0 obj
<<
/Length 9750
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 24 12 re f*
.960784 .960784 .862745 rg
n 24 12 18 12 re f*
.960784 .960784 .862745 rg
n 42 12 6 12 re f*
.960784 .960784 .862745 rg
n 48 12 96 12 re f*
.960784 .960784 .862745 rg
n 144 12 6 12 re f*
.960784 .960784 .862745 rg
n 150 12 0 12 re f*
.960784 .960784 .862745 rg
n 0 0 12 12 re f*
.960784 .960784 .862745 rg
n 12 0 0 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf .733333 .733333 .733333 rg (    ) Tj 0 .733333 0 rg (int) Tj .733333 .733333 .733333 rg ( ) Tj 0 0 0 rg (connection_close) Tj (;) Tj .733333 .733333 .733333 rg  T* 0 0 0 rg (};) Tj .733333 .733333 .733333 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 683.8236 cm
q
BT 1 0 0 1 0 26 Tm 2.112556 Tw 12 TL /F1 10 Tf 0 0 0 rg (This request_t data structure describes an incoming request. The ) Tj /F6 10 Tf (method) Tj /F1 10 Tf ( field can contain one of the) Tj T* 0 Tw 190.6492 Tw (following operations: ) Tj /F6 10 Tf (`) Tj T* 0 Tw (enum) Tj ( ) Tj (method) Tj ( ) Tj ({UNK,) Tj ( ) Tj (SET,) Tj ( ) Tj (GET,) Tj ( ) Tj (DEL,) Tj ( ) Tj (PING,) Tj ( ) Tj (DUMP,) Tj ( ) Tj (RST,) Tj ( ) Tj (EXIT,) Tj ( ) Tj (SETOPT}; `) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 653.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL .674882 Tw (Note that you should only handle SET,GET,DEL and RST requests since the framework handles the) Tj T* 0 Tw (remaining methods for internal operations and they are never visible to your code) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 587.8236 cm
q
BT 1 0 0 1 0 50 Tm .456019 Tw 12 TL /F1 10 Tf 0 0 0 rg (The other fields are filled with the key, key length and, if applicable the payload length. You should properly) Tj T* 0 Tw .701575 Tw (handle the flag ) Tj /F4 10 Tf (connection_close) Tj /F1 10 Tf (. You can read and write the flag to specify how to treat the connection at) Tj T* 0 Tw 3.555197 Tw (the end of the request. For example, during the request handling you may decide to set the flag) Tj T* 0 Tw 5.628453 Tw /F4 10 Tf (connection_close) Tj /F1 10 Tf (. At the end of the request you should check its value and accordingly call) Tj T* 0 Tw /F4 10 Tf (close_connection\(int\)) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 581.8236 cm
Q
q
1 0 0 1 57.02362 581.8236 cm
Q
q
1 0 0 1 57.02362 569.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (server_utils.h) Tj /F1 10 Tf ( contains interface functions to interact with the framework:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 569.8236 cm
Q
q
1 0 0 1 57.02362 563.8236 cm
Q
q
1 0 0 1 57.02362 299.8236 cm
q
1 1 1 rg
n 0 264 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 246 481.2283 -30 re f*
1 1 1 rg
n 0 216 481.2283 -30 re f*
.878431 .878431 .878431 rg
n 0 186 481.2283 -42 re f*
1 1 1 rg
n 0 144 481.2283 -42 re f*
.878431 .878431 .878431 rg
n 0 102 481.2283 -42 re f*
1 1 1 rg
n 0 60 481.2283 -30 re f*
.878431 .878431 .878431 rg
n 0 30 481.2283 -30 re f*
0 0 0 rg
BT /F3 10 Tf 12 TL ET
q
1 0 0 1 6 249 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 34.3186 0 Td (API) Tj T* -34.3186 0 Td ET
Q
Q
q
1 0 0 1 103.3072 249 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 158.4556 0 Td (Description) Tj T* -158.4556 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 231 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (allocate_request\(\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 219 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F1 10 Tf 0 0 0 rg (It allocate a ) Tj /F4 10 Tf (struct request) Tj /F1 10 Tf ( and return a pointer to it that can be passed to the) Tj T* (functions below.) Tj T* ET
Q
Q
q
1 0 0 1 6 189 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (recv_request\(int,) Tj T* (struct request*\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 189 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F1 10 Tf 0 0 0 rg (Check if the socket in ready \(see connection_ready\) and read the command header) Tj T* (from the socket. It populates the data structure pointed by ) Tj /F4 10 Tf (request) Tj T* ET
Q
Q
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL (accept_new_conn) Tj T* (ection\(int, struct) Tj T* (conn_info*\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 159 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F1 10 Tf 0 0 0 rg (Accept a new incoming connection from the listening socket and return connection) Tj T* (info in the ) Tj /F4 10 Tf (conn_info) Tj /F1 10 Tf ( struct) Tj T* ET
Q
Q
q
1 0 0 1 6 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL (read_payload\(int,) Tj T* (struct request*,) Tj T* (size_t, char*\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 117 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F1 10 Tf 0 0 0 rg (Read ) Tj /F4 10 Tf (expected_len) Tj /F1 10 Tf ( bytes from the socket and put the data into the buffer passed as) Tj T* (argument) Tj T* ET
Q
Q
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL (check_payload\(int,) Tj T* (struct request*,) Tj T* (size_t\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 75 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F1 10 Tf 0 0 0 rg (Check if payload's length is ) Tj /F4 10 Tf (expected_len) Tj /F1 10 Tf ( and read the last byte from the socket) Tj T* (\(which should be 'n'\)) Tj T* ET
Q
Q
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (close_connection\(i) Tj T* (nt\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Close the connection with the client on the given socket) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (send_response\(int,) Tj T* (int,int,char*\)) Tj T* ET
Q
Q
q
1 0 0 1 103.3072 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Send a response to the client.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 246 m 481.2283 246 l S
n 0 216 m 481.2283 216 l S
n 0 186 m 481.2283 186 l S
n 0 144 m 481.2283 144 l S
n 0 102 m 481.2283 102 l S
n 0 60 m 481.2283 60 l S
n 0 30 m 481.2283 30 l S
n 97.3072 0 m 97.3072 264 l S
n 0 264 m 481.2283 264 l S
n 0 0 m 481.2283 0 l S
n 0 0 m 0 264 l S
n 481.2283 0 m 481.2283 264 l S
Q
Q
Q
q
1 0 0 1 57.02362 299.8236 cm
Q
q
1 0 0 1 57.02362 293.8236 cm
Q
q
1 0 0 1 57.02362 293.8236 cm
Q
q
1 0 0 1 57.02362 281.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (hash.h) Tj /F1 10 Tf ( contains the hashtable definition.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 281.8236 cm
Q
q
1 0 0 1 57.02362 248.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Server design) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 206.8236 cm
q
.960784 .960784 .862745 rg
n 98.10209 12 36 12 re f*
BT 1 0 0 1 0 26 Tm 1.939168 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this assignment we ask for a thread-based server providing key-value store features. Duplicating the) Tj T* 0 Tw .765522 Tw (process by means of ) Tj /F6 10 Tf (fork\(\)) Tj /F1 10 Tf ( is forbidden. You must use Pthreads APIs instead. A typical design includes) Tj T* 0 Tw (the main thread \(dispatcher or listener\) and several other threads dubbed helpers.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 176.8236 cm
q
.960784 .960784 .862745 rg
n 13.34 0 138 12 re f*
BT 1 0 0 1 0 14 Tm .178556 Tw 12 TL /F1 10 Tf 0 0 0 rg (In a relatively simple design threads are spawned on demand. For each new incoming connection \(accepted) Tj T* 0 Tw (by ) Tj /F6 10 Tf (accept_new_connection\(\)) Tj /F1 10 Tf (\), you should carry out the following operations:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 170.8236 cm
Q
q
1 0 0 1 57.02362 170.8236 cm
Q
q
1 0 0 1 57.02362 158.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Spawning of a new thread, the dispatcher.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 152.8236 cm
Q
q
1 0 0 1 57.02362 140.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You should allocate a new request object \(i.e.,`struct request`\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 134.8236 cm
Q
q
1 0 0 1 57.02362 122.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (You should populate the pre-allocted request by calling ) Tj /F4 10 Tf (recv_request) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 116.8236 cm
Q
q
1 0 0 1 57.02362 104.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (In accordace with the ) Tj /F4 10 Tf (method) Tj /F1 10 Tf ( field you should handle the request.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 98.82362 cm
Q
q
1 0 0 1 57.02362 62.82362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .936147 Tw 12 TL /F1 10 Tf 0 0 0 rg (You may decide to set the request's field ) Tj /F4 10 Tf (connection_close) Tj /F1 10 Tf ( to 1. On return from the request handling) Tj T* 0 Tw 1.348556 Tw (routine you should read ) Tj /F4 10 Tf (connection_close) Tj /F1 10 Tf ( to check if you should close the connection \(e.g, an error) Tj T* 0 Tw (occured\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 62.82362 cm
Q
 
endstream
endobj
48 0 obj
<<
/Length 9548
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 741.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.228241 Tw 12 TL /F1 10 Tf 0 0 0 rg (A big downside of this design is that on incoming connections the server adds overhead to create a new) Tj T* 0 Tw (thread. A more efficient design instead creates threads once at startup, and uses a so-called ) Tj /F3 10 Tf (job-queue) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 735.0236 cm
Q
q
1 0 0 1 57.02362 735.0236 cm
Q
q
1 0 0 1 57.02362 711.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .353241 Tw (The server creates a pool of threads when it starts. The main thread is the dispatcher, while the others) Tj T* 0 Tw (are called "helpers") Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 705.0236 cm
Q
q
1 0 0 1 57.02362 681.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .659873 Tw (The dispatcher listens for incoming connections and it passes connection info \(i.e.,struct conn_info\) to) Tj T* 0 Tw (the helpers by a shared data structure such as a queue.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 675.0236 cm
Q
q
1 0 0 1 57.02362 663.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The helpers retrieve connection infos from the queue and they handle incoming requests.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 663.0236 cm
Q
q
1 0 0 1 57.02362 633.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.064168 Tw (Mutual exclusion and synchronization is required when accessing the shared connection infos Queue in a) Tj T* 0 Tw (Producer/consumer approach. You should handle the case in which the queue is empty:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 615.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (You should use conditional variables for communication.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 597.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A simple approach is as the following:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 591.0236 cm
Q
q
1 0 0 1 57.02362 591.0236 cm
Q
q
1 0 0 1 57.02362 579.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Upon a new incoming request the dispatcher inserts a new object into the queue.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 573.0236 cm
Q
q
1 0 0 1 57.02362 549.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 6.559104 Tw 12 TL /F1 10 Tf 0 0 0 rg (It notifies the workers that the queue is not empty by calling \() Tj /F4 10 Tf (pthread_cond_signal) Tj /F1 10 Tf ( or) Tj T* 0 Tw /F4 10 Tf (pthread_cond_broadcast) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 543.0236 cm
Q
q
1 0 0 1 57.02362 519.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.438022 Tw 12 TL /F1 10 Tf 0 0 0 rg (The workers wait for the queue to not be empty \(i.e., they should block on ) Tj /F4 10 Tf (pthread_cond_wait) Tj /F1 10 Tf (\) and) Tj T* 0 Tw (when they wake up they pop an element from the shared queue.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 519.0236 cm
Q
q
1 0 0 1 57.02362 486.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Testing and debugging) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 444.0236 cm
q
.960784 .960784 .862745 rg
n 87.43156 12 24 12 re f*
.960784 .960784 .862745 rg
n 111.4316 12 6.45789 12 re f*
.960784 .960784 .862745 rg
n 117.8894 12 30 12 re f*
.960784 .960784 .862745 rg
n 166.5852 12 24 12 re f*
.960784 .960784 .862745 rg
n 190.5852 12 6.45789 12 re f*
.960784 .960784 .862745 rg
n 197.0431 12 72 12 re f*
BT 1 0 0 1 0 26 Tm .374897 Tw 12 TL /F1 10 Tf 0 0 0 rg (Concurrency issues are notoriously hard to debug. The included tests try to detect any potential issues, and) Tj T* 0 Tw .45789 Tw (can be invoked via ) Tj /F6 10 Tf (make) Tj ( ) Tj (check) Tj /F1 10 Tf ( \(or ) Tj /F6 10 Tf (make) Tj ( ) Tj (docker-check) Tj /F1 10 Tf (\). Additionally, you can manually test your code) Tj T* 0 Tw (using the included ) Tj /F4 10 Tf (test_client.py) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 390.0236 cm
q
.960784 .960784 .862745 rg
n 207.0467 12 42 12 re f*
.960784 .960784 .862745 rg
n 303.11 12 12 12 re f*
.960784 .960784 .862745 rg
n 332.6867 12 54 12 re f*
.960784 .960784 .862745 rg
n 39.45 0 48 12 re f*
.960784 .960784 .862745 rg
n 141.92 0 12 12 re f*
.960784 .960784 .862745 rg
n 171.7 0 42 12 re f*
BT 1 0 0 1 0 38 Tm 1.073797 Tw 12 TL /F1 10 Tf 0 0 0 rg (For debugging deadlocks, it may be useful to add prints around every lock and unlock operation, to try to) Tj T* 0 Tw 2.097739 Tw (determine where a program gets stuck. The framework provides functions to print output, including the) Tj T* 0 Tw -0.101666 Tw (thread-id, which are enabled via server flags: - ) Tj /F6 10 Tf (pr_info) Tj /F1 10 Tf ( prints if the ) Tj /F6 10 Tf (-v) Tj /F1 10 Tf ( \(or ) Tj /F6 10 Tf (--verbose) Tj /F1 10 Tf (\) flag is passed to the) Tj T* 0 Tw (server. - ) Tj /F6 10 Tf (pr_debug) Tj /F1 10 Tf ( prints if the ) Tj /F6 10 Tf (-d) Tj /F1 10 Tf ( \(or ) Tj /F6 10 Tf (--debug) Tj /F1 10 Tf (\) flag is passed to the server.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 336.0236 cm
q
.960784 .960784 .862745 rg
n 0 0 42 12 re f*
.960784 .960784 .862745 rg
n 42 0 6 12 re f*
.960784 .960784 .862745 rg
n 48 0 48 12 re f*
.960784 .960784 .862745 rg
n 96 0 6 12 re f*
.960784 .960784 .862745 rg
n 102 0 12 12 re f*
.960784 .960784 .862745 rg
n 114 0 6 12 re f*
.960784 .960784 .862745 rg
n 120 0 144 12 re f*
.960784 .960784 .862745 rg
n 264 0 6 12 re f*
.960784 .960784 .862745 rg
n 270 0 18 12 re f*
.960784 .960784 .862745 rg
n 288 0 6 12 re f*
.960784 .960784 .862745 rg
n 294 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 2.254556 Tw 12 TL /F1 10 Tf 0 0 0 rg (The included tests will, by default, restart your server for every individual test. Additionally, any output) Tj T* 0 Tw .744609 Tw (produced by the server is not shown. To aid in testing and development, the tests support some additional) Tj T* 0 Tw 23.14648 Tw (flags. These flags should be passed directly to ) Tj /F4 10 Tf (check.py) Tj /F1 10 Tf ( \(e.g.,) Tj T* 0 Tw /F6 10 Tf (python3) Tj ( ) Tj (check.py) Tj ( ) Tj (-d) Tj ( ) Tj (--debug-print-server-out) Tj ( ) Tj (get) Tj ( ) Tj (del) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 306.0236 cm
q
BT 1 0 0 1 0 14 Tm .888241 Tw 12 TL /F1 10 Tf 0 0 0 rg (Any arguments passed after the flags refer to test groups that should be run. By default, ) Tj /F4 10 Tf (check.py) Tj /F1 10 Tf ( runs all) Tj T* 0 Tw (tests. The names of test groups are printed during execution \(between parenthesis, in grey\).) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 264.0236 cm
q
BT 1 0 0 1 0 26 Tm .394917 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F6 10 Tf (-d) Tj /F1 10 Tf ( flag will halt tests after the first error that occurs, and show a backtrace inside the python code. You) Tj T* 0 Tw .783071 Tw (may read through the particular test case in ) Tj /F4 10 Tf (check.py) Tj /F1 10 Tf ( to see what the test is expecting, and what could be) Tj T* 0 Tw (going wrong.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 234.0236 cm
q
BT 1 0 0 1 0 14 Tm .464882 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F6 10 Tf (--debug-print-server-out) Tj /F1 10 Tf ( tries to print any output produced by your server, after each test. Note) Tj T* 0 Tw (that the server is not started with either ) Tj /F6 10 Tf (-d) Tj /F1 10 Tf ( or ) Tj /F6 10 Tf (-v) Tj /F1 10 Tf ( flag, so any ) Tj /F6 10 Tf (pr_info) Tj /F1 10 Tf ( or ) Tj /F6 10 Tf (pr_debug) Tj /F1 10 Tf ( prints are not enabled.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 180.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.226962 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F6 10 Tf (--debug-server-pid) Tj /F1 10 Tf ( is probably the most useful, as it allows you to run the server manually in a) Tj T* 0 Tw 1.692686 Tw (separate terminal while the tests run. The flag expect the PID of the server as argument. Make sure to) Tj T* 0 Tw 1.002397 Tw (implement the ) Tj /F4 10 Tf (RST) Tj /F1 10 Tf ( command when using this feature. To automatically pass the PID of a running server,) Tj T* 0 Tw (use:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 146.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL ($ python3 check.py --debug-server-pid `pgrep kvstore`) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 114.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.105785 Tw 12 TL /F1 10 Tf 0 0 0 rg (For manual testing, you can issue your own commands to a running server using ) Tj /F4 10 Tf (test_client.py) Tj /F1 10 Tf (. It can be) Tj T* 0 Tw (used to issue a single command, such as:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 81.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL ($ python3 test_client.py set mykey somevalue) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
49 0 obj
<<
/Length 7848
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can also issue multiple commands over the same connection in interactive mode:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 599.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F6 10 Tf 0 0 0 rg ($ python3 test_client.py --interactive) Tj T* (>) Tj ( set mykey somevalue) Tj T* (OK) Tj T* (>) Tj ( set) Tj T* (Key: otherkey) Tj T* (Value: foobar) Tj T* (OK) Tj T* (>) Tj ( get mykey) Tj T* (OK: somevalue) Tj T* (>) Tj ( get otherkey) Tj T* (OK: foobar) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 566.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (The assignment and grading) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 512.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.302844 Tw (This assignment is individual; you are not allowed to work in teams. Submissions should be made to the) Tj T* 0 Tw .919862 Tw (submission system before the deadline. Multiple submissions are encouraged to evaluate your submission) Tj T* 0 Tw .619314 Tw (on our system. Our system may differ from your local system \(e.g., compiler version\); points are only given) Tj T* 0 Tw (for features that work on our system.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 482.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.372778 Tw (Your grade will be 1 if you did not submit your work on time, has an invalid format, or has errors during) Tj T* 0 Tw (compilation.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 464.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The following tests determine your tentative grade \(in no particular order\):) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 458.8236 cm
Q
q
1 0 0 1 57.02362 458.8236 cm
Q
q
1 0 0 1 57.02362 446.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1.0pt if you made a valid submission that compiles.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 440.8236 cm
Q
q
1 0 0 1 57.02362 428.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+0.5pt for implementing the SET command. ) Tj /F3 10 Tf (Required with at least 0.3pts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 422.8236 cm
Q
q
1 0 0 1 57.02362 410.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+0.5pt for implementing the GET command. ) Tj /F3 10 Tf (Required with at least 0.3pts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 404.8236 cm
Q
q
1 0 0 1 57.02362 392.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+0.5pt for implementing the DEL command. ) Tj /F3 10 Tf (Required with at least 0.3pts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 386.8236 cm
Q
q
1 0 0 1 57.02362 362.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.110835 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0.5pt for implementing basic parallelism \(supporting concurrent connections via different threads\).) Tj T* 0 Tw /F3 10 Tf (Required) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 356.8236 cm
Q
q
1 0 0 1 57.02362 332.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.064029 Tw (+1.0pt for supporting concurrent SET commands correctly \(prevent concurrent accesses to the same) Tj T* 0 Tw (key but allowing concurrent accesses to different keys\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 326.8236 cm
Q
q
1 0 0 1 57.02362 302.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.942362 Tw (+1.0pt for supporting concurrent GET commands \(e.g., allowing different GET requests to different) Tj T* 0 Tw (keys, disallowing GET requests on keys that are being modified by SET\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 296.8236 cm
Q
q
1 0 0 1 57.02362 272.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.000896 Tw (+2.0pt for implementing a readers-writer lock \(i.e., supporting concurrent read accesses through GET to) Tj T* 0 Tw (the same key, but only allowing a single writer via SET/DEL\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 266.8236 cm
Q
q
1 0 0 1 57.02362 242.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.980596 Tw (+2.0pt for implementing a thread pool instead of spawning new threads for every connection. You) Tj T* 0 Tw (should use conditional variables.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 236.8236 cm
Q
q
1 0 0 1 57.02362 224.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1.0pt for surviving the parallel stress tests for the various commands.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 218.8236 cm
Q
q
1 0 0 1 57.02362 206.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1.0pt for supporting the STAT method. You should use atomics to modify statistics.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 200.8236 cm
Q
q
1 0 0 1 57.02362 188.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (-1.0pt if ) Tj /F6 10 Tf (gcc) Tj ( ) Tj (-Wall) Tj ( ) Tj (-Wextra) Tj /F1 10 Tf ( reports warnings when compiling your code.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 188.8236 cm
Q
q
1 0 0 1 57.02362 170.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If you do not implement an item marked with ) Tj /F3 10 Tf (Required) Tj /F1 10 Tf ( you cannot obtain any further points.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 152.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The grade will be capped at 10, so you do not need to implement all features to get a top grade.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 122.8236 cm
q
BT 1 0 0 1 0 14 Tm 2.029908 Tw 12 TL /F1 10 Tf 0 0 0 rg (To get an indication of the grade you might get, you can run the automated tests using the command) Tj T* 0 Tw /F6 10 Tf (make) Tj ( ) Tj (check) Tj /F1 10 Tf (. You may also use ) Tj /F6 10 Tf (make) Tj ( ) Tj (docker-check) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 80.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL 2.090642 Tw (Note: Your key-value store will be evaluated largely automatically. This means features only get) Tj T* 0 Tw .183797 Tw (points if they pass the particular tests, and there will be no half grade for "effort". Most features \(and) Tj T* 0 Tw (thus points\) are split up into multiple separate tests however.) Tj T* ET
Q
Q
 
endstream
endobj
50 0 obj
<<
/Length 7739
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL 3.289873 Tw (Note2: The test framework may not properly detect incorrect locking and data races. Indeed,) Tj T* 0 Tw 1.967122 Tw (automatically verifing the correctness of concurrency programs is challenging. Incorrect uses of) Tj T* 0 Tw (locking privitives will be checked by manual inspection.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 696.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Run with Docker) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 666.0236 cm
q
BT 1 0 0 1 0 14 Tm -0.03535 Tw 12 TL /F1 10 Tf 0 0 0 rg (You can use ) Tj /F4 10 Tf (make docker-check) Tj /F1 10 Tf ( to run all the tests inside a docker container. To enter the container you can) Tj T* 0 Tw (run) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 636.0236 cm
q
BT 1 0 0 1 0 14 Tm .122835 Tw 12 TL /F6 10 Tf 0 0 0 rg (` docker) Tj ( ) Tj (run) Tj ( ) Tj (--privileged) Tj ( ) Tj (-it) Tj ( ) Tj (--rm) Tj ( ) Tj (-v) Tj ( ) Tj ("`pwd`:/code") Tj ( ) Tj (-w) Tj ( ) Tj (/code) Tj ( ) Tj (vusec/vu-os-kvstore) Tj  T* 0 Tw (-check) Tj ( ) Tj (/bin/bash `) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 618.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Please note that you need to omit the ) Tj /F4 10 Tf (--read-only) Tj /F1 10 Tf ( flag in order to properly run the server.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 585.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Pthreads) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 555.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.576373 Tw (The man pages for pthreads may not be present on your system. To install these, use the following) Tj T* 0 Tw (command on Ubuntu/Debian:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 521.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480.0283 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL (sudo apt install manpages-posix manpages-posix-dev) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 489.8236 cm
q
.960784 .960784 .862745 rg
n 190.65 0 18 12 re f*
.960784 .960784 .862745 rg
n 208.65 0 6 12 re f*
.960784 .960784 .862745 rg
n 214.65 0 48 12 re f*
BT 1 0 0 1 0 14 Tm -0.10598 Tw 12 TL /F1 10 Tf 0 0 0 rg (Pthreads is the standard C interface for threading, adhering to the POSIX standard. It provides APIs to create) Tj T* 0 Tw (and manage threads in your program. See ) Tj /F6 10 Tf (man) Tj ( ) Tj (pthreads) Tj /F1 10 Tf ( for general info.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 459.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.135317 Tw (Here we list the most common APIs which will be likely useful to you. Please always refer to the man page for) Tj T* 0 Tw (an exhaustive description.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 453.8236 cm
Q
q
1 0 0 1 57.02362 369.8236 cm
q
1 1 1 rg
n 0 84 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 66 481.2283 -30 re f*
1 1 1 rg
n 0 36 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 18 481.2283 -18 re f*
0 0 0 rg
BT /F3 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 93.36849 0 Td (API) Tj T* -93.36849 0 Td ET
Q
Q
q
1 0 0 1 221.407 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 100.7957 0 Td (Descrption) Tj T* -100.7957 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (pthread_create, pthread_exit,) Tj T* (pthread_attr_init) Tj T* ET
Q
Q
q
1 0 0 1 221.407 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (Create a new thread, manage attributes and exit a) Tj T* (thread.) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pthread_self) Tj T* ET
Q
Q
q
1 0 0 1 221.407 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Get id for the running thread) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pthread_join) Tj T* ET
Q
Q
q
1 0 0 1 221.407 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Wait for a specific thread to terminate) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 66 m 481.2283 66 l S
n 0 36 m 481.2283 36 l S
n 0 18 m 481.2283 18 l S
n 215.407 0 m 215.407 84 l S
n 0 84 m 481.2283 84 l S
n 0 0 m 481.2283 0 l S
n 0 0 m 0 84 l S
n 481.2283 0 m 481.2283 84 l S
Q
Q
Q
q
1 0 0 1 57.02362 369.8236 cm
Q
q
1 0 0 1 57.02362 339.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Mutual exclusion) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 327.8236 cm
Q
q
1 0 0 1 57.02362 213.8236 cm
q
1 1 1 rg
n 0 114 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 96 481.2283 -18 re f*
1 1 1 rg
n 0 78 481.2283 -30 re f*
.878431 .878431 .878431 rg
n 0 48 481.2283 -18 re f*
1 1 1 rg
n 0 30 481.2283 -30 re f*
0 0 0 rg
BT /F3 10 Tf 12 TL ET
q
1 0 0 1 6 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 113.9044 0 Td (API) Tj T* -113.9044 0 Td ET
Q
Q
q
1 0 0 1 262.4788 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 80.25975 0 Td (Descrption) Tj T* -80.25975 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pthread_mutex_init,pthread_mutex_destroy) Tj T* ET
Q
Q
q
1 0 0 1 262.4788 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Initialize and destroy mutex) Tj T* ET
Q
Q
q
1 0 0 1 6 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (pthread_mutex_lock, pthread_mutex_trylock,) Tj T* (pthread_mutex_unlock) Tj T* ET
Q
Q
q
1 0 0 1 262.4788 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (Locking/Unlocking a mutex with a) Tj T* (blocking/non-blocking behavior.) Tj T* ET
Q
Q
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pthread_rwlock_init, pthread_rwlock_destroy) Tj T* ET
Q
Q
q
1 0 0 1 262.4788 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Init and destroy and read/write mutex) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (pthread_rwlock_rdlock, pthread_rwlock_tryrdlock,) Tj T* (pthread_rwlock_wrlock, pthread_rwlock_trywrlock) Tj T* ET
Q
Q
q
1 0 0 1 262.4788 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (Locking/Unlocking the read/write mutex with a) Tj T* (blocking/non-blocking behavior) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 96 m 481.2283 96 l S
n 0 78 m 481.2283 78 l S
n 0 48 m 481.2283 48 l S
n 0 30 m 481.2283 30 l S
n 256.4788 0 m 256.4788 114 l S
n 0 114 m 481.2283 114 l S
n 0 0 m 481.2283 0 l S
n 0 0 m 0 114 l S
n 481.2283 0 m 481.2283 114 l S
Q
Q
Q
q
1 0 0 1 57.02362 213.8236 cm
Q
q
1 0 0 1 57.02362 183.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Synchronization) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 153.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.493453 Tw (Conditional variables are built on top of mutual exclusion and they provide synchronization on shared) Tj T* 0 Tw (resources.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 123.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Conditional variables) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 111.8236 cm
Q
q
1 0 0 1 57.02362 75.82362 cm
q
1 1 1 rg
n 0 36 481.2283 -18 re f*
.878431 .878431 .878431 rg
n 0 18 481.2283 -18 re f*
0 0 0 rg
BT /F3 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 74.31233 0 Td (API) Tj T* -74.31233 0 Td ET
Q
Q
q
1 0 0 1 183.2947 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 118.4618 0 Td (Description) Tj T* -118.4618 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pthread_cond_wait) Tj T* ET
Q
Q
q
1 0 0 1 183.2947 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Block on a conditional variable) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 481.2283 0 l S
n 0 18 m 481.2283 18 l S
n 177.2947 0 m 177.2947 36 l S
n 0 36 m 481.2283 36 l S
n 0 0 m 0 36 l S
n 481.2283 0 m 481.2283 36 l S
Q
Q
Q
 
endstream
endobj
51 0 obj
<<
/Length 626
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 735.0236 cm
q
1 1 1 rg
n 0 30 481.2283 -30 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (pthread_cond_signal,pthread_cond_) Tj T* (broadcast) Tj T* ET
Q
Q
q
1 0 0 1 183.2947 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL (Unblock on or more threads currently blocked on a conditional) Tj T* (variable) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 30 m 481.2283 30 l S
n 177.2947 0 m 177.2947 30 l S
n 0 0 m 0 30 l S
n 481.2283 0 m 481.2283 30 l S
n 0 0 m 481.2283 0 l S
Q
Q
Q
q
1 0 0 1 57.02362 735.0236 cm
Q
 
endstream
endobj
52 0 obj
<<
/Nums [ 0 53 0 R 1 54 0 R 2 55 0 R 3 56 0 R 4 57 0 R 
  5 58 0 R 6 59 0 R 7 60 0 R 8 61 0 R ]
>>
endobj
53 0 obj
<<
/S /D /St 1
>>
endobj
54 0 obj
<<
/S /D /St 2
>>
endobj
55 0 obj
<<
/S /D /St 3
>>
endobj
56 0 obj
<<
/S /D /St 4
>>
endobj
57 0 obj
<<
/S /D /St 5
>>
endobj
58 0 obj
<<
/S /D /St 6
>>
endobj
59 0 obj
<<
/S /D /St 7
>>
endobj
60 0 obj
<<
/S /D /St 8
>>
endobj
61 0 obj
<<
/S /D /St 9
>>
endobj
xref
0 62
0000000000 65535 f 
0000000073 00000 n 
0000000170 00000 n 
0000000277 00000 n 
0000000386 00000 n 
0000000498 00000 n 
0000000666 00000 n 
0000000781 00000 n 
0000000949 00000 n 
0000001117 00000 n 
0000001285 00000 n 
0000001396 00000 n 
0000001502 00000 n 
0000001616 00000 n 
0000001858 00000 n 
0000002064 00000 n 
0000002270 00000 n 
0000002476 00000 n 
0000002682 00000 n 
0000002888 00000 n 
0000003094 00000 n 
0000003300 00000 n 
0000003506 00000 n 
0000003612 00000 n 
0000003870 00000 n 
0000003945 00000 n 
0000004115 00000 n 
0000004236 00000 n 
0000004405 00000 n 
0000004516 00000 n 
0000004628 00000 n 
0000004804 00000 n 
0000004914 00000 n 
0000005025 00000 n 
0000005136 00000 n 
0000005264 00000 n 
0000005400 00000 n 
0000005541 00000 n 
0000005671 00000 n 
0000005820 00000 n 
0000005938 00000 n 
0000006068 00000 n 
0000006191 00000 n 
0000006308 00000 n 
0000019073 00000 n 
0000026043 00000 n 
0000032765 00000 n 
0000042134 00000 n 
0000051936 00000 n 
0000061536 00000 n 
0000069436 00000 n 
0000077227 00000 n 
0000077904 00000 n 
0000078020 00000 n 
0000078054 00000 n 
0000078088 00000 n 
0000078122 00000 n 
0000078156 00000 n 
0000078190 00000 n 
0000078224 00000 n 
0000078258 00000 n 
0000078292 00000 n 
trailer
<<
/ID 
[<3b32d295246705e4b651fcaf30504e0c><3b32d295246705e4b651fcaf30504e0c>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 23 0 R
/Root 22 0 R
/Size 62
>>
startxref
78326
%%EOF
